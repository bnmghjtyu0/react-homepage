{"version":3,"sources":["Material.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["radios","datas","id","name","age","type","Material","_useState","useState","_useState2","Object","slicedToArray","value","setValue","_useState3","_useState4","state","setState","react_default","a","createElement","RadioGroup","aria-label","onChange","event","target","map","radio","idx","FormControlLabel","control","Radio","label","FormGroup","data","Checkbox","objectSpread","defineProperty","checked","keys","v","i","App","useEffect","axios","url","adapter","jsonpAdapter","then","res","console","log","className","react_router_dom","to","react_router","path","component","Boolean","window","location","hostname","match","ReactDOM","render","basename","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"yRAOMA,EAAS,CAAC,QAAS,WACnBC,EAAQ,CACZ,CACEC,GAAI,EACJC,KAAM,OACNC,IAAK,GACLC,KAAM,MAER,CACEH,GAAI,EACJC,KAAM,OACNC,IAAK,GACLC,KAAM,MAER,CACEH,GAAI,EACJC,KAAM,QACNC,IAAK,GACLC,KAAM,OAyCKC,EAtCE,WAAM,IAAAC,EACKC,mBAAS,UADdC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACdK,EADcH,EAAA,GACPI,EADOJ,EAAA,OAAAK,EAKKN,mBAAS,IALdO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAKdE,EALcD,EAAA,GAKPE,EALOF,EAAA,GAUrB,OACEG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,aAAW,SACXnB,KAAK,UACLS,MAAOA,EACPW,SAdN,SAAsBC,GACpBX,EAASW,EAAMC,OAAOb,SAejBZ,EAAO0B,IAAI,SAACC,EAAOC,GAAR,OACVV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAkBjB,MAAOe,EAAOG,QAASZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,MAAWC,MAAOL,OAI/DT,EAAAC,EAAAC,cAACa,EAAA,EAAD,KACGhC,EAAMyB,IAAI,SAACQ,EAAMN,GAAP,OACTV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CACEC,QACEZ,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAUZ,UApBOpB,EAoBwB+B,EAAK/B,KApBrB,SAAAqB,GACnCP,EAASP,OAAA0B,EAAA,EAAA1B,CAAA,GAAKM,EAANN,OAAA2B,EAAA,EAAA3B,CAAA,GAAcP,EAAOqB,EAAMC,OAAOa,aAmBqB1B,MAAOsB,EAAK/B,OAEnE6B,MAAOE,EAAK/B,OAtBO,IAAAA,KA0BxBO,OAAO6B,KAAKvB,GAAOU,IAAI,SAACc,EAAGC,GAAJ,OAAUzB,EAAMwB,IAAMA,MCnBrCE,EAjCH,WAiBV,OAhBAC,oBAAU,WAERC,IAAM,CACJC,IAAK,kFACLC,QAASC,MACRC,KAAK,SAAAC,GACNC,QAAQC,IAAIF,OAWd/B,EAAAC,EAAAC,cAAA,OAAKgC,UAAU,OACblC,EAAAC,EAAAC,cAAA,UAAQgC,UAAU,cAEhBlC,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAMC,GAAG,IAAIF,UAAU,YAAvB,QAGAlC,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAMC,GAAG,YAAYF,UAAU,YAA/B,YAGAlC,EAAAC,EAAAC,cAACmC,EAAA,EAAD,CAAOC,KAAK,aAAaC,UAAWnD,OCxBxBoD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP9C,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAQY,SAAS,KACf/C,EAAAC,EAAAC,cAAC8C,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,KAAK,SAAAwB,GACjCA,EAAaC,6FEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.18a5a811.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormGroup from \"@material-ui/core/FormGroup\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\n\r\nconst radios = [\"kelly\", \"Richard\"];\r\nconst datas = [\r\n  {\r\n    id: 1,\r\n    name: \"john\",\r\n    age: 24,\r\n    type: \"a1\"\r\n  },\r\n  {\r\n    id: 2,\r\n    name: \"mike\",\r\n    age: 50,\r\n    type: \"a1\"\r\n  },\r\n  {\r\n    id: 3,\r\n    name: \"kelly\",\r\n    age: 50,\r\n    type: \"a2\"\r\n  }\r\n];\r\nconst Material = () => {\r\n  const [value, setValue] = useState(\"female\");\r\n  function handleChange(event) {\r\n    setValue(event.target.value);\r\n  }\r\n  const [state, setState] = useState({});\r\n\r\n  const handleChangeCheckbox = name => event => {\r\n    setState({ ...state, [name]: event.target.checked });\r\n  };\r\n  return (\r\n    <div>\r\n      <RadioGroup\r\n        aria-label=\"Gender\"\r\n        name=\"gender1\"\r\n        value={value}\r\n        onChange={handleChange}\r\n      >\r\n        {radios.map((radio, idx) => (\r\n          <FormControlLabel value={radio} control={<Radio />} label={radio} />\r\n        ))}\r\n      </RadioGroup>\r\n\r\n      <FormGroup>\r\n        {datas.map((data, idx) => (\r\n          <FormControlLabel\r\n            control={\r\n              <Checkbox onChange={handleChangeCheckbox(data.name)} value={data.name} />\r\n            }\r\n            label={data.name}\r\n          />\r\n        ))}\r\n      </FormGroup>\r\n      {Object.keys(state).map((v, i) => state[v] && v)}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Material;\r\n","import React, { useEffect } from 'react'\r\nimport logo from './logo.svg'\r\nimport './App.css'\r\nimport axios from 'axios'\r\nimport jsonpAdapter from 'axios-jsonp'\r\nimport qs from 'qs'\r\nimport { Router, Route, Link } from 'react-router-dom'\r\nimport Material from './Material'\r\n\r\nconst App = () => {\r\n  useEffect(() => {\r\n    // 有 jsonp\r\n    axios({\r\n      url: 'https://zh.wikipedia.org/w/api.php?action=opensearch&format=json&search=rainbow',\r\n      adapter: jsonpAdapter,\r\n    }).then(res => {\r\n      console.log(res)\r\n    })\r\n\r\n    // 沒有 jsonp\r\n    // axios({\r\n    //   url: 'https://zh.wikipedia.org/w/api.php?action=opensearch&format=json&search=rainbow',\r\n    // }).then(res => {\r\n    //   console.log(res)\r\n    // })\r\n  })\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\r\n        <Link to=\"/\" className=\"App-link\">\r\n          Home\r\n        </Link>\r\n        <Link to=\"/material\" className=\"App-link\">\r\n          material\r\n        </Link>\r\n        <Route path=\"/material/\" component={Material} />\r\n      </header>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <Router basename=\"/\">\r\n    <App />\r\n  </Router>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";"],"sourceRoot":""}